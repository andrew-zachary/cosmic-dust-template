---
import Base from '../../../../layouts/Base.astro';
import List from '../../../../layouts/List.astro';
import Categories from '../../../../layouts/Categories.astro';
import Paginator from '../../../../layouts/Paginator.astro';

import Section from '../../../../components/articles/index/section.astro';

import translationsMeta from '../../../../locals/meta.json';
import cats from '../../../../locals/cats.json';

const {cat, lang} = Astro.params;
const {data, lastPage, currentPage} = Astro.props.page;

// get current catKey
let selectedCat = null;
for (const catKey in cats) {
    if(cats[catKey][lang].slug === cat) {
        selectedCat = catKey;
        break;
    }
}

// export params (lang, cat)
export async function getStaticPaths({paginate}) {
    const mdxFiles = await Astro.glob('../../../../data/*.mdx');

    const totalPaginate = [];

    Object.keys(translationsMeta).forEach(metaLang => {
        Object.keys(cats).forEach(catKey => {

            // filter and sort mdxFiles for every cat
            const filteredMdxFiles = mdxFiles.filter(mdxFile => mdxFile['content']['cats'].includes(catKey));
            const sortedMdxFiles = filteredMdxFiles.sort((a, b) => {
                return a['content']['order'] - b['content']['order'];
            });

            totalPaginate.push(
                paginate(sortedMdxFiles, {pageSize:5, params: {lang: translationsMeta[metaLang].name, cat: cats[catKey][translationsMeta[metaLang].name].slug}})
            );
        });
    });

    return totalPaginate;
}
---

<Base title={cat.replace('-', ' ')}>
    <Section />
    <Categories selectedCat={selectedCat} cats={cats} />
    <Paginator baseUrl={`/${lang}/articles/${cat}`} lastPage={lastPage} currentPage={currentPage} />
    <List mdxFiles={data} />
</Base>

<style></style>
